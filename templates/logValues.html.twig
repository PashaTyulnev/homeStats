<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name=viewport content="width=device-width, initial-scale=1">
    <title>{% block title %}Room environment Dashboard{% endblock %}</title>
    <link rel="manifest" href="/manifest.json">

    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
    {% block stylesheets %}
        <link href="main.css" rel="stylesheet">
    {% endblock %}

    {% block javascripts %}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
        <script src="main.js"></script>
        <script src="stats.js"></script>
    {% endblock %}
</head>
<body>
<div class="container">
    <header>
        <div class="header-content">
            <div>
                <h1>Room Environment Dashboard</h1>
                <p class="subtitle">Real-time monitoring of your room's environmental conditions</p>
            </div>
            <button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon">
                    <circle cx="12" cy="12" r="5"></circle>
                    <line x1="12" y1="1" x2="12" y2="3"></line>
                    <line x1="12" y1="21" x2="12" y2="23"></line>
                    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                    <line x1="1" y1="12" x2="3" y2="12"></line>
                    <line x1="21" y1="12" x2="23" y2="12"></line>
                    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon">
                    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                </svg>
            </button>
        </div>
    </header>

    <div class="stats-grid">
        <div class="stat-card">
            <div class="card-header">
                <span class="card-title">Temperature</span>
                <div class="stat-icon temperature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"/>
                    </svg>
                </div>
            </div>
            <div class="stat-value">
                <span id="temp-value">{{ lastLog.temperature }}</span>°C
            </div>
            <div class="stat-range">
                <span class="range-min">15°C</span>
                <div class="range-bar">
                    <div class="range-progress temperature-progress" style="width: 50%;"></div>
                </div>
                <span class="range-max">30°C</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="card-header">
                <span class="card-title">Humidity</span>
                <div class="stat-icon humidity-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"/>
                    </svg>
                </div>
            </div>
            <div class="stat-value">
                <span id="humidity-value">{{ lastLog.humidity }}</span>%
            </div>
            <div class="stat-range">
                <span class="range-min">0%</span>
                <div class="range-bar">
                    <div class="range-progress humidity-progress" style="width: 45%;"></div>
                </div>
                <span class="range-max">100%</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="card-header">
                <span class="card-title">Dust Level</span>
                <div class="stat-icon dust-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"/>
                    </svg>
                </div>
            </div>
            <div class="stat-value">
                <span id="dust-value">{{ lastLog.dustDensity }}</span> µg/m³
            </div>
            <div class="stat-range">
                <span class="range-min">0</span>
                <div class="range-bar">
                    <div class="range-progress dust-progress" style="width: 28%;"></div>
                </div>
                <span class="range-max">100</span>
            </div>
        </div>

        <!-- Add this after the Dust Level card in the stats-grid div -->
        <div class="stat-card">
            <div class="card-header">
                <span class="card-title">CO2 Level</span>
                <div class="stat-icon co2-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 8H2"/>
                        <path d="M20 12H2"/>
                        <path d="M22 16H2"/>
                        <path d="M13 3h1.5a1.5 1.5 0 0 1 0 3h-2a1.5 1.5 0 0 0 0 3H15"/>
                        <path d="M2 20h.01"/>
                        <path d="M7 20v-1"/>
                    </svg>
                </div>
            </div>
            <div class="stat-value">
                <span id="co2-value">{{ lastLog.co2value }}</span> ppm
            </div>
            <div class="stat-range">
                <span class="range-min">400</span>
                <div class="range-bar">
                    <div class="range-progress co2-progress" style="transition:0.5s; width: 0;"></div>
                </div>
                <span class="range-max">2000</span>
            </div>
        </div>
    </div>

    <div class="stats-chart">
        <div class="chart-header">
            <h2 class="chart-title">Environmental Data History</h2>
            <div class="time-controls">
                <button class="time-button active" data-days="1">24H</button>
                <button class="time-button" data-days="7">7D</button>
                <button class="time-button" data-days="30">30D</button>
            </div>
        </div>
        <canvas id="environmentalChart"></canvas>
        <div class="last-updated">Last updated: <span id="update-time">April 13, 2025, 15:42</span></div>
    </div>

    <button id="fullscreen-button">Vollbild umschalten</button>
</div>

<script>
    // Theme toggling functionality
    document.addEventListener("DOMContentLoaded", function() {
        const themeToggle = document.getElementById('theme-toggle');

        // Check for saved theme preference or use default (dark)
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.documentElement.className = savedTheme;

        // Update button appearance based on current theme
        updateThemeToggleButton();

        // Handle theme toggle click
        themeToggle.addEventListener('click', () => {
            if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                document.documentElement.classList.add('light');
                localStorage.setItem('theme', 'light');
            } else {
                document.documentElement.classList.remove('light');
                document.documentElement.classList.add('dark');
                localStorage.setItem('theme', 'dark');
            }

            updateThemeToggleButton();

            // If chart exists, update it with new theme colors
            if (window.environmentalChart) {
                updateChartTheme();
            }
        });

        function updateThemeToggleButton() {
            if (document.documentElement.classList.contains('dark')) {
                themeToggle.setAttribute('aria-label', 'Switch to light mode');
                themeToggle.classList.add('dark-mode');
            } else {
                themeToggle.setAttribute('aria-label', 'Switch to dark mode');
                themeToggle.classList.remove('dark-mode');
            }
        }

        function updateChartTheme() {
            const isDark = document.documentElement.classList.contains('dark');
            const textColor = isDark ? '#E5E7EB' : '#1F2937';

            // Update chart text colors
            window.environmentalChart.options.plugins.legend.labels.color = textColor;
            window.environmentalChart.options.scales['y-temperature'].ticks.color = textColor;
            window.environmentalChart.options.scales['y-humidity'].ticks.color = textColor;
            window.environmentalChart.options.scales['y-dust'].ticks.color = textColor;
            window.environmentalChart.options.scales.x.ticks.color = textColor;

            // Update title colors
            window.environmentalChart.options.scales['y-temperature'].title.color = textColor;
            window.environmentalChart.options.scales['y-humidity'].title.color = textColor;
            window.environmentalChart.options.scales['y-dust'].title.color = textColor;

            window.environmentalChart.update();
        }

        // Hook into original chart creation to apply theme
        const originalGetEnvironmentalData = window.getEnvironmentalData;
        window.getEnvironmentalData = function(days = 1) {
            originalGetEnvironmentalData(days);

            // Apply theme to chart after a short delay to ensure it's created
            setTimeout(() => {
                if (window.environmentalChart) {
                    updateChartTheme();
                }
            }, 100);
        };
    });
</script>

</body>
</html>